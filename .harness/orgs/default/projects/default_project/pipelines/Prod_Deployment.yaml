pipeline:
  name: Prod-Deployment-Portfolio
  identifier: Prod_Deployment
  projectIdentifier: default_project
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Pre Approval
        identifier: Pre_Approval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: Pre Approval
                  identifier: Pre_Approval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: Please review the following information and approve the pipeline progression...
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - _project_all_users
                    isAutoRejectEnabled: false
                    approverInputs: []
        tags: {}
        delegateSelectors:
          - helm-delegate
    - stage:
        name: Creating NS
        identifier: Creating_NS
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Creating NS
                  identifier: Creating_NS
                  spec:
                    shell: Bash
                    executionTarget: {}
                    delegateSelectors:
                      - helm-delegate
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          NAMESPACE=<+pipeline.variables.namespace>  # This will be replaced at runtime
                          if ! kubectl get ns "$NAMESPACE" > /dev/null 2>&1; then
                            echo "Creating namespace: $NAMESPACE"
                            kubectl create ns "$NAMESPACE"
                          else
                            echo "Namespace $NAMESPACE already exists"
                          fi
                    environmentVariables: []
                    outputVariables: []
                    outputAlias:
                      key: Creating NS
                      scope: Pipeline
                  timeout: 10m
          environment:
            environmentRef: Production
            deployToAll: false
            infrastructureDefinitions:
              - identifier: ProdInfra
        tags: {}
        delegateSelectors:
          - helm-delegate
    - stage:
        name: App Deployment
        identifier: App_Deployment
        description: ""
        type: Deployment
        spec:
          deploymentType: NativeHelm
          service:
            serviceRef: ProdService
          environment:
            environmentRef: Production
            deployToAll: false
            infrastructureDefinitions:
              - identifier: ProdInfra
          execution:
            steps:
              - step:
                  name: Helm Deployment
                  identifier: Helm_Deployment
                  type: HelmDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    ignoreReleaseHistFailStatus: false
            rollbackSteps:
              - step:
                  name: Helm Rollback
                  identifier: helmRollback
                  type: HelmRollback
                  timeout: 10m
                  spec: {}
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        variables:
          - name: imageTag
            type: String
            description: Enter the image version
            required: true
            value: <+input>
        delegateSelectors:
          - helm-delegate
    - stage:
        name: Post Verification
        identifier: Post_Verification
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Post Validation
                  identifier: Post_Validation
                  spec:
                    shell: Bash
                    executionTarget: {}
                    delegateSelectors:
                      - helm-delegate
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          NAMESPACE=<+pipeline.variables.namespace>
                          PREFIX="my-portfolio-"
                          echo "Validating namespace: $NAMESPACE"
                          # List pods
                          kubectl get pods -n "$NAMESPACE"
                          # Wait for all pods to become Ready
                          echo "Waiting for all pods to become Ready..."
                          if ! kubectl wait --for=condition=Ready pods --all -n "$NAMESPACE" --timeout=60s; then
                            echo "Not all pods became Ready in time."
                            exit 1
                          fi

                          # Check for restarts
                          echo "Checking for pod restarts..."
                          if kubectl get pods -n "$NAMESPACE" | grep -v NAME | awk '{print $4}' | grep -qv "0"; then
                            echo "Some pods have restarted unexpectedly."
                            exit 1
                          fi

                          # Check for CrashLoopBackOff or Error state
                          echo "?Checking for pods in error states..."
                          if kubectl get pods -n "$NAMESPACE" | grep -E "CrashLoopBackOff|Error"; then
                            echo "One or more pods are in CrashLoopBackOff/Error state."
                            exit 1
                          fi

                          # Check deployment rollout
                          echo "Checking deployment rollout status..."
                          DEPLOYMENTS=$(kubectl get deployments -n "$NAMESPACE" -o name)
                          for deploy in $DEPLOYMENTS; do
                            if ! kubectl rollout status "$deploy" -n "$NAMESPACE" --timeout=60s; then
                              echo "Rollout failed for $deploy"
                              exit 1
                            fi
                          done

                          # Service discovery
                          SERVICE_NAME=$(kubectl get svc -n "$NAMESPACE" --no-headers -o custom-columns=":metadata.name" | grep "^$PREFIX")
                          NODE_IP=$(kubectl get nodes -o jsonpath="{.items[0].status.addresses[?(@.type=='InternalIP')].address}")
                          NODE_PORT=$(kubectl get svc "$SERVICE_NAME" -n "$NAMESPACE" -o jsonpath="{.spec.ports[0].nodePort}")
                          APP_URL="http://$NODE_IP:$NODE_PORT"

                          echo "Accessible URL: $APP_URL"

                          # Curl test
                          echo "Curling application endpoint..."
                          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL")
                          if [ "$STATUS" -ne 200 ]; then
                            echo "Application did not return HTTP 200. Returned: $STATUS"
                            exit 1
                          fi

                          # Check logs for errors
                          echo "Scanning pod logs for 'error'..."
                          for pod in $(kubectl get pods -n "$NAMESPACE" -o name); do
                            if kubectl logs -n "$NAMESPACE" "$pod" | grep -i "error"; then
                              echo "Found 'error' in logs of $pod"
                              exit 1
                            fi
                          done

                          echo "All validation checks passed. Ready for production rollout."
                    environmentVariables: []
                    outputVariables: []
                    outputAlias:
                      key: Post Validation
                      scope: Pipeline
                  timeout: 10m
        tags: {}
  variables:
    - name: namespace
      type: String
      description: Enter Namespace
      required: true
      value: <+input>
